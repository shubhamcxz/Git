git diff # difference between current directory and staged 
git diff --staged # staged - last_commmit
git diff --cached # is same as git diff --staged
git rm --cached README # unstage README
git rm log/\*.log # git does its own file-name expansion, so \ is needed.
#-------------------------------------------------------------------------
git log --patch -2 # show changes made in the last two commits
git log --stat
git log --pretty=oneline #other options are `full` , `fuller` ,`format` & `short`.
git log --pretty=format:"%h - %an,  %ar  :  %s"
# %H commit hash %h abb. commit hash %T tree hash %p = parent , %a? = author ?(name/email/date/relative date), %s  subject
#-------------------------------------------------------------------------
git commmit --amend -m "New Commit Message"

#{
git add forgotten_file
git commit --amend --no-edit # making amendment without changing the commit message.
#}
git checkout -- <filename> # to unmodify the changes made to the file
git remote -v # remotes
git remote add <remote_name> <remote_link>
git remote show <remote>
git remote rename <old_remote_name> <new_remote_name>
git remote remove <some_remote_name>
#------------------------------------------------------------------------
git tag # shows the list of available tags
git tag -l "<pattern_to_match>" # same as : git tag --list "<pattern_..>"
# git tqg types : lightweight     annotated

#{ Creating an annotated tag
git tag -a v1.5 -m "My version 1.5"
# tags are not shared - will have to push them separately.

git push <origin or other remote> <tag_name>
git push <origin or other remote> --tags # pushes all the tags that aren't there already.
#}
 
git tag -a <tagname> <checksum/part_of_the_checksum>
git tag -a  # ? 
git show <tagname>

git checkout <tagname> # has some ill effects due to "detached HEAD state".

# GIT ALIASES
git config --global alias.<alias_name> <alias_value>
git config --global alias.unstage "reset HEAD --"
# git unstage <file_name>  will be  equivalent to git reset HEAD -- <file_name>

git config --global alias.<alias_name> "!<external_command>" # for external commands use ! before the command to be executed.

#-----------------------------------------------------------------------
# -------------------------------- BRANCHING ---------------------------

git branch testing
# HEAD is the pointer to the local branch on which we are currently working on.









































 



